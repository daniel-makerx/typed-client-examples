/* eslint-disable */
/**
 * This file was automatically generated by algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import {
  AppClientCallArgs,
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import { Algodv2, OnApplicationComplete, Transaction } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "call_abi(string)string": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "call_abi_txn(pay,string)string": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_global(uint64,uint64,string,byte[4])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_local(uint64,uint64,string,byte[4])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_box(byte[4],string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "error()void": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "create_abi(string)string": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "update_abi(string)string": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "delete_abi(string)string": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "opt_in()void": {
      "call_config": {
        "opt_in": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 3
    },
    "local": {
      "num_byte_slices": 2,
      "num_uints": 2
    }
  },
  "schema": {
    "global": {
      "declared": {
        "bytes1": {
          "type": "bytes",
          "key": "bytes1",
          "descr": ""
        },
        "bytes2": {
          "type": "bytes",
          "key": "bytes2",
          "descr": ""
        },
        "int1": {
          "type": "uint64",
          "key": "int1",
          "descr": ""
        },
        "int2": {
          "type": "uint64",
          "key": "int2",
          "descr": ""
        },
        "value": {
          "type": "uint64",
          "key": "value",
          "descr": ""
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {
        "local_bytes1": {
          "type": "bytes",
          "key": "local_bytes1",
          "descr": ""
        },
        "local_bytes2": {
          "type": "bytes",
          "key": "local_bytes2",
          "descr": ""
        },
        "local_int1": {
          "type": "uint64",
          "key": "local_int1",
          "descr": ""
        },
        "local_int2": {
          "type": "uint64",
          "key": "local_int2",
          "descr": ""
        }
      },
      "reserved": {}
    }
  },
  "contract": {
    "name": "TestingApp",
    "methods": [
      {
        "name": "call_abi",
        "args": [
          {
            "type": "string",
            "name": "value"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "call_abi_txn",
        "args": [
          {
            "type": "pay",
            "name": "txn"
          },
          {
            "type": "string",
            "name": "value"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "set_global",
        "args": [
          {
            "type": "uint64",
            "name": "int1"
          },
          {
            "type": "uint64",
            "name": "int2"
          },
          {
            "type": "string",
            "name": "bytes1"
          },
          {
            "type": "byte[4]",
            "name": "bytes2"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_local",
        "args": [
          {
            "type": "uint64",
            "name": "int1"
          },
          {
            "type": "uint64",
            "name": "int2"
          },
          {
            "type": "string",
            "name": "bytes1"
          },
          {
            "type": "byte[4]",
            "name": "bytes2"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_box",
        "args": [
          {
            "type": "byte[4]",
            "name": "name"
          },
          {
            "type": "string",
            "name": "value"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "error",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "create_abi",
        "args": [
          {
            "type": "string",
            "name": "input"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "update_abi",
        "args": [
          {
            "type": "string",
            "name": "input"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "delete_abi",
        "args": [
          {
            "type": "string",
            "name": "input"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "opt_in",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "delete_application": "CALL",
    "no_op": "CREATE",
    "opt_in": "CREATE",
    "update_application": "CALL"
  }
}

export type CallRequest<TSignature extends string, TArgs = undefined> = {
  method: TSignature
  methodArgs: TArgs
} & AppClientCallCoreParams & CoreAppCallArgs
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }

export type TestingApp = {
  methods: 
    & Record<'call_abi(string)string' | 'call_abi', {
      argsObj: {
        value: string
      }
      argsTuple: [value: string]
      returns: string
    }>
    & Record<'call_abi_txn(pay,string)string' | 'call_abi_txn', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        value: string
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, value: string]
      returns: string
    }>
    & Record<'set_global(uint64,uint64,string,byte[4])void' | 'set_global', {
      argsObj: {
        int1: bigint | number
        int2: bigint | number
        bytes1: string
        bytes2: Uint8Array
      }
      argsTuple: [int1: bigint | number, int2: bigint | number, bytes1: string, bytes2: Uint8Array]
      returns: void
    }>
    & Record<'set_local(uint64,uint64,string,byte[4])void' | 'set_local', {
      argsObj: {
        int1: bigint | number
        int2: bigint | number
        bytes1: string
        bytes2: Uint8Array
      }
      argsTuple: [int1: bigint | number, int2: bigint | number, bytes1: string, bytes2: Uint8Array]
      returns: void
    }>
    & Record<'set_box(byte[4],string)void' | 'set_box', {
      argsObj: {
        name: Uint8Array
        value: string
      }
      argsTuple: [name: Uint8Array, value: string]
      returns: void
    }>
    & Record<'error()void' | 'error', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'create_abi(string)string' | 'create_abi', {
      argsObj: {
        input: string
      }
      argsTuple: [input: string]
      returns: string
    }>
    & Record<'update_abi(string)string' | 'update_abi', {
      argsObj: {
        input: string
      }
      argsTuple: [input: string]
      returns: string
    }>
    & Record<'delete_abi(string)string' | 'delete_abi', {
      argsObj: {
        input: string
      }
      argsTuple: [input: string]
      returns: string
    }>
    & Record<'opt_in()void' | 'opt_in', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  state: {
    global: {
      'bytes1'?: BinaryState
      'bytes2'?: BinaryState
      'int1'?: IntegerState
      'int2'?: IntegerState
      'value'?: IntegerState
    }
    local: {
      'local_bytes1'?: BinaryState
      'local_bytes2'?: BinaryState
      'local_int1'?: IntegerState
      'local_int2'?: IntegerState
    }
  }
}
export type IntegerState = { asBigInt(): bigint, asNumber(): number }
export type BinaryState = { asByteArray(): Uint8Array, asString(): string }
export type MethodArgs<TSignature extends keyof TestingApp['methods']> = TestingApp['methods'][TSignature]['argsObj' | 'argsTuple']
export type MethodReturn<TSignature extends keyof TestingApp['methods']> = TestingApp['methods'][TSignature]['returns']
type MapperArgs<TSignature extends keyof TestingApp['methods']> = TSignature extends any ? [signature: TSignature, args: MethodArgs<TSignature>, params: AppClientCallCoreParams & CoreAppCallArgs ] : never

export type TestingAppCreateArgs =
  | (BareCallArgs & CoreAppCallArgs & (OnCompleteNoOp | OnCompleteOptIn))
  | ['create_abi(string)string', MethodArgs<'create_abi(string)string'>, (CoreAppCallArgs & (OnCompleteNoOp))?]
export type TestingAppUpdateArgs =
  | BareCallArgs & CoreAppCallArgs
  | ['update_abi(string)string', MethodArgs<'update_abi(string)string'>, CoreAppCallArgs]
export type TestingAppDeleteArgs =
  | BareCallArgs & CoreAppCallArgs
  | ['delete_abi(string)string', MethodArgs<'delete_abi(string)string'>, CoreAppCallArgs]
export type TestingAppDeployArgs = {
  deployTimeParams?: TealTemplateParams
  createArgs?: TestingAppCreateArgs
  updateArgs?: TestingAppUpdateArgs
  deleteArgs?: TestingAppDeleteArgs
}

export abstract class TestingAppCallFactory {
  static callAbi(args: MethodArgs<'call_abi(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return {
      method: 'call_abi(string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.value],
      ...params,
    }
  }
  static callAbiTxn(args: MethodArgs<'call_abi_txn(pay,string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return {
      method: 'call_abi_txn(pay,string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.value],
      ...params,
    }
  }
  static setGlobal(args: MethodArgs<'set_global(uint64,uint64,string,byte[4])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return {
      method: 'set_global(uint64,uint64,string,byte[4])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.int1, args.int2, args.bytes1, args.bytes2],
      ...params,
    }
  }
  static setLocal(args: MethodArgs<'set_local(uint64,uint64,string,byte[4])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return {
      method: 'set_local(uint64,uint64,string,byte[4])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.int1, args.int2, args.bytes1, args.bytes2],
      ...params,
    }
  }
  static setBox(args: MethodArgs<'set_box(byte[4],string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return {
      method: 'set_box(byte[4],string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.name, args.value],
      ...params,
    }
  }
  static error(args: MethodArgs<'error()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return {
      method: 'error()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  static createAbi(args: MethodArgs<'create_abi(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return {
      method: 'create_abi(string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.input],
      ...params,
    }
  }
  static updateAbi(args: MethodArgs<'update_abi(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return {
      method: 'update_abi(string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.input],
      ...params,
    }
  }
  static deleteAbi(args: MethodArgs<'delete_abi(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return {
      method: 'delete_abi(string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.input],
      ...params,
    }
  }
  static optIn(args: MethodArgs<'opt_in()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return {
      method: 'opt_in()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}
function mapBySignature(...[signature, args, params]: MapperArgs<keyof TestingApp['methods']>) {
  switch(signature) {
    case 'call_abi(string)string':
    case 'call_abi':
      return TestingAppCallFactory.callAbi(args, params)
    case 'call_abi_txn(pay,string)string':
    case 'call_abi_txn':
      return TestingAppCallFactory.callAbiTxn(args, params)
    case 'set_global(uint64,uint64,string,byte[4])void':
    case 'set_global':
      return TestingAppCallFactory.setGlobal(args, params)
    case 'set_local(uint64,uint64,string,byte[4])void':
    case 'set_local':
      return TestingAppCallFactory.setLocal(args, params)
    case 'set_box(byte[4],string)void':
    case 'set_box':
      return TestingAppCallFactory.setBox(args, params)
    case 'error()void':
    case 'error':
      return TestingAppCallFactory.error(args, params)
    case 'create_abi(string)string':
    case 'create_abi':
      return TestingAppCallFactory.createAbi(args, params)
    case 'update_abi(string)string':
    case 'update_abi':
      return TestingAppCallFactory.updateAbi(args, params)
    case 'delete_abi(string)string':
    case 'delete_abi':
      return TestingAppCallFactory.deleteAbi(args, params)
    case 'opt_in()void':
    case 'opt_in':
      return TestingAppCallFactory.optIn(args, params)
  }
}

/** A client to make calls to the TestingApp smart contract */
export class TestingAppClient {
  /** The underlying `ApplicationClient` for when you want to have more flexibility */
  public readonly appClient: ApplicationClient

  /**
   * Creates a new instance of `TestingAppClient`
   * @param appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, algod: Algodv2) {
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  protected async mapReturnValue<TReturn>(resultPromise: Promise<AppCallTransactionResult> | AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): Promise<AppCallTransactionResultOfType<TReturn>> {
    const result = await resultPromise
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   * @param request A request object containing the method signature, args, and any other relevant properties
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   */
  public call<TSignature extends keyof TestingApp['methods']>(request: CallRequest<TSignature, any>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(this.appClient.call(request), returnValueFormatter)
  }

  /**
   * Idempotently deploys the TestingApp smart contract.
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: TestingAppDeployArgs & AppClientDeployCoreParams = {}) {
    return this.appClient.deploy({ 
      ...params,
      createArgs: Array.isArray(params.createArgs) ? mapBySignature(...params.createArgs as [any, any, any]): params.createArgs,
      deleteArgs: Array.isArray(params.deleteArgs) ? mapBySignature(...params.deleteArgs as [any, any, any]): params.deleteArgs,
      updateArgs: Array.isArray(params.updateArgs) ? mapBySignature(...params.updateArgs as [any, any, any]): params.updateArgs,
    })
  }

  /**
   * Creates a new instance of the TestingApp smart contract using a bare call.
   * @param args The arguments for the bare call
   * @returns The create result
   */
  public create(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp | OnCompleteOptIn)): Promise<AppCallTransactionResultOfType<undefined>>;
  /**
   * Creates a new instance of the TestingApp smart contract using the create_abi(string)string ABI method.
   * @param method The ABI method to use
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The create result
   */
  public create(method: 'create_abi(string)string' | 'create_abi', args: MethodArgs<'create_abi(string)string'>, params?: AppClientCallCoreParams & AppClientCompilationParams  & (OnCompleteNoOp)): Promise<AppCallTransactionResultOfType<MethodReturn<'create_abi(string)string'>>>;
  public create(...args: any[]): Promise<AppCallTransactionResultOfType<unknown>> {
    if(typeof args[0] !== 'string') {
      return this.appClient.create({...args[0], })
    } else {
      return this.appClient.create({ ...mapBySignature(args[0] as any, args[1], args[2]), })
    }
  }

  /**
   * Updates an existing instance of the TestingApp smart contract using a bare call.
   * @param args The arguments for the bare call
   * @returns The update result
   */
  public update(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs): Promise<AppCallTransactionResultOfType<undefined>>;
  /**
   * Updates an existing instance of the TestingApp smart contract using the update_abi(string)string ABI method.
   * @param method The ABI method to use
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The update result
   */
  public update(method: 'update_abi(string)string' | 'update_abi', args: MethodArgs<'update_abi(string)string'>, params?: AppClientCallCoreParams & AppClientCompilationParams ): Promise<AppCallTransactionResultOfType<MethodReturn<'update_abi(string)string'>>>;
  public update(...args: any[]): Promise<AppCallTransactionResultOfType<unknown>> {
    if(typeof args[0] !== 'string') {
      return this.appClient.update({...args[0], })
    } else {
      return this.appClient.update({ ...mapBySignature(args[0] as any, args[1], args[2]), })
    }
  }

  /**
   * Deletes an existing instance of the TestingApp smart contract using a bare call.
   * @param args The arguments for the bare call
   * @returns The delete result
   */
  public delete(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): Promise<AppCallTransactionResultOfType<undefined>>;
  /**
   * Deletes an existing instance of the TestingApp smart contract using the delete_abi(string)string ABI method.
   * @param method The ABI method to use
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The delete result
   */
  public delete(method: 'delete_abi(string)string' | 'delete_abi', args: MethodArgs<'delete_abi(string)string'>, params?: AppClientCallCoreParams ): Promise<AppCallTransactionResultOfType<MethodReturn<'delete_abi(string)string'>>>;
  public delete(...args: any[]): Promise<AppCallTransactionResultOfType<unknown>> {
    if(typeof args[0] !== 'string') {
      return this.appClient.delete({...args[0], })
    } else {
      return this.appClient.delete({ ...mapBySignature(args[0] as any, args[1], args[2]), })
    }
  }

  /**
   * Opts the user into an existing instance of the TestingApp smart contract using the opt_in()void ABI method.
   * @param method The ABI method to use
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The optIn result
   */
  public optIn(method: 'opt_in()void' | 'opt_in', args: MethodArgs<'opt_in()void'>, params?: AppClientCallCoreParams ): Promise<AppCallTransactionResultOfType<MethodReturn<'opt_in()void'>>>;
  public optIn(...args: any[]): Promise<AppCallTransactionResultOfType<unknown>> {
    if(typeof args[0] !== 'string') {
      return this.appClient.optIn({...args[0], })
    } else {
      return this.appClient.optIn({ ...mapBySignature(args[0] as any, args[1], args[2]), })
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the TestingApp smart contract.
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs, params?: AppClientCallCoreParams & CoreAppCallArgs) {
    return this.appClient.clearState({ ...args, ...params, })
  }

  /**
   * Calls the call_abi(string)string ABI method.
   *
   * @param args The arguments for the ABI method
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public callAbi(args: MethodArgs<'call_abi(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
    return this.call(TestingAppCallFactory.callAbi(args, params))
  }

  /**
   * Calls the call_abi_txn(pay,string)string ABI method.
   *
   * @param args The arguments for the ABI method
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public callAbiTxn(args: MethodArgs<'call_abi_txn(pay,string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
    return this.call(TestingAppCallFactory.callAbiTxn(args, params))
  }

  /**
   * Calls the set_global(uint64,uint64,string,byte[4])void ABI method.
   *
   * @param args The arguments for the ABI method
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setGlobal(args: MethodArgs<'set_global(uint64,uint64,string,byte[4])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
    return this.call(TestingAppCallFactory.setGlobal(args, params))
  }

  /**
   * Calls the set_local(uint64,uint64,string,byte[4])void ABI method.
   *
   * @param args The arguments for the ABI method
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setLocal(args: MethodArgs<'set_local(uint64,uint64,string,byte[4])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
    return this.call(TestingAppCallFactory.setLocal(args, params))
  }

  /**
   * Calls the set_box(byte[4],string)void ABI method.
   *
   * @param args The arguments for the ABI method
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setBox(args: MethodArgs<'set_box(byte[4],string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
    return this.call(TestingAppCallFactory.setBox(args, params))
  }

  /**
   * Calls the error()void ABI method.
   *
   * @param args The arguments for the ABI method
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public error(args: MethodArgs<'error()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
    return this.call(TestingAppCallFactory.error(args, params))
  }

  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the application's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<TestingApp['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get bytes1() {
        return TestingAppClient.getBinaryState(state, 'bytes1')
      },
      get bytes2() {
        return TestingAppClient.getBinaryState(state, 'bytes2')
      },
      get int1() {
        return TestingAppClient.getIntegerState(state, 'int1')
      },
      get int2() {
        return TestingAppClient.getIntegerState(state, 'int2')
      },
      get value() {
        return TestingAppClient.getIntegerState(state, 'value')
      },
    }
  }

  /**
   * Returns the application's local state for a given account wrapped in a strongly typed accessor with options to format the stored value
   * @param account The address of the account for which to read local state from.
   */
  public async getLocalState(account: string | SendTransactionFrom): Promise<TestingApp['state']['local']> {
    const state = await this.appClient.getLocalState(account)
    return {
      get local_bytes1() {
        return TestingAppClient.getBinaryState(state, 'local_bytes1')
      },
      get local_bytes2() {
        return TestingAppClient.getBinaryState(state, 'local_bytes2')
      },
      get local_int1() {
        return TestingAppClient.getIntegerState(state, 'local_int1')
      },
      get local_int2() {
        return TestingAppClient.getIntegerState(state, 'local_int2')
      },
    }
  }

}
