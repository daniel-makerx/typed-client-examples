#pragma version 8
intcblock 0 1 10
bytecblock 0x74696d6573 0x 0x6772656574696e67 0x151f7c75
txn NumAppArgs
intc_0 // 0
==
bnz main_l8
txna ApplicationArgs 0
pushbytes 0x02bece11 // "hello(string)string"
==
bnz main_l7
txna ApplicationArgs 0
pushbytes 0xbc7b6df9 // "create_1arg(string)string"
==
bnz main_l6
txna ApplicationArgs 0
pushbytes 0xd869f636 // "create_2arg(string,uint32)void"
==
bnz main_l5
err
main_l5:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
==
&&
assert
txna ApplicationArgs 1
store 2
txna ApplicationArgs 2
intc_0 // 0
extract_uint32
store 3
load 2
load 3
callsub create2arg_6
intc_1 // 1
return
main_l6:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
==
&&
assert
txna ApplicationArgs 1
callsub create1arg_5
store 1
bytec_3 // 0x151f7c75
load 1
concat
log
intc_1 // 1
return
main_l7:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
callsub hello_3
store 0
bytec_3 // 0x151f7c75
load 0
concat
log
intc_1 // 1
return
main_l8:
txn OnCompletion
intc_0 // NoOp
==
bnz main_l14
txn OnCompletion
intc_1 // OptIn
==
bnz main_l13
txn OnCompletion
pushint 4 // UpdateApplication
==
bnz main_l12
err
main_l12:
txn ApplicationID
intc_0 // 0
!=
assert
callsub update_2
intc_1 // 1
return
main_l13:
txn ApplicationID
intc_0 // 0
==
assert
callsub barecreate_4
intc_1 // 1
return
main_l14:
txn ApplicationID
intc_0 // 0
==
assert
callsub barecreate_4
intc_1 // 1
return

// int_to_ascii
inttoascii_0:
proto 1 1
pushbytes 0x30313233343536373839 // "0123456789"
frame_dig -1
intc_1 // 1
extract3
retsub

// itoa
itoa_1:
proto 1 1
frame_dig -1
intc_0 // 0
==
bnz itoa_1_l5
frame_dig -1
intc_2 // 10
/
intc_0 // 0
>
bnz itoa_1_l4
bytec_1 // ""
itoa_1_l3:
frame_dig -1
intc_2 // 10
%
callsub inttoascii_0
concat
b itoa_1_l6
itoa_1_l4:
frame_dig -1
intc_2 // 10
/
callsub itoa_1
b itoa_1_l3
itoa_1_l5:
pushbytes 0x30 // "0"
itoa_1_l6:
retsub

// update
update_2:
proto 0 0
txn Sender
global CreatorAddress
==
// unauthorized
assert
pushint TMPL_UPDATABLE // TMPL_UPDATABLE
// Check app is updatable
assert
retsub

// hello
hello_3:
proto 1 1
bytec_1 // ""
bytec_1 // ""
store 4
intc_0 // 0
store 5
hello_3_l1:
load 5
bytec_0 // "times"
app_global_get
<
bz hello_3_l3
load 4
bytec_2 // "greeting"
app_global_get
concat
pushbytes 0x2c20 // ", "
concat
frame_dig -1
extract 2 0
concat
pushbytes 0x0a // "\n"
concat
store 4
load 5
intc_1 // 1
+
store 5
b hello_3_l1
hello_3_l3:
load 4
frame_bury 0
frame_dig 0
len
itob
extract 6 0
frame_dig 0
concat
frame_bury 0
retsub

// bare_create
barecreate_4:
proto 0 0
bytec_2 // "greeting"
pushbytes 0x48656c6c6f // "Hello"
app_global_put
bytec_0 // "times"
intc_1 // 1
app_global_put
intc_1 // 1
return

// create_1arg
create1arg_5:
proto 1 1
bytec_1 // ""
bytec_2 // "greeting"
frame_dig -1
extract 2 0
app_global_put
bytec_0 // "times"
intc_1 // 1
app_global_put
frame_dig -1
extract 2 0
pushbytes 0x5f // "_"
concat
bytec_0 // "times"
app_global_get
callsub itoa_1
concat
frame_bury 0
frame_dig 0
len
itob
extract 6 0
frame_dig 0
concat
frame_bury 0
retsub

// create_2arg
create2arg_6:
proto 2 0
bytec_2 // "greeting"
frame_dig -2
extract 2 0
app_global_put
bytec_0 // "times"
frame_dig -1
app_global_put
intc_1 // 1
return